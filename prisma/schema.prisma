// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  twoFactorEnabled Boolean?
  twofactors       TwoFactor[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}


model Workspace{
  id String @id @default(cuid())
  name String

  board Board[]
  @@map("workspace")
}

model Board{
  id String @id @default(cuid())
  workspaceId String
  name String
  image_url String
  thumb_url String
  
  list List[]
  workspace Workspace @relation(fields: [workspaceId], references: [id] ,onDelete: Cascade)
  @@map("board")
}

model List{
  id String @id @default(cuid())
  boardId String
  name String
  order Int

  cards Card[]
  board Board @relation(fields: [boardId], references: [id] ,onDelete: Cascade)

  @@map("list")
}

model Card{
  id String @id @default(cuid())
  listId String
  name String
  order Int

  list List @relation(fields: [listId], references: [id] ,onDelete: Cascade)

  @@map("card")
}